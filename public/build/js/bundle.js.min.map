{"version":3,"sources":["app.js","buscador.js"],"names":["paso","pasoInicial","pasoFinal","cita","id","nombre","fecha","hora","servicios","iniciarApp","mostrarSeccion","tabs","botonesPaginador","paginaAnterior","paginaSiguiente","consultarAPI","idCliente","nombreCliente","seleccionarFecha","seleccionarHora","mostrarResumen","seccionAnterior","document","querySelector","classList","remove","pasoSelector","add","tabAnterior","querySelectorAll","forEach","boton","addEventListener","e","parseInt","target","dataset","async","url","resultado","fetch","mostrarServicios","json","error","console","log","servicio","precio","nombreServicio","createElement","textContent","precioServicio","servicioDiv","idServicio","onclick","seleccionarServicio","appendChild","divServicio","some","agregado","filter","value","dia","Date","getUTCDay","includes","mostrarAlerta","split","mensaje","tipo","elemento","desaparece","alertaPrevia","alerta","setTimeout","resumen","firstChild","removeChild","Object","values","length","headingServicios","contenedorServicio","textoServicio","innerHTML","headingCita","fechaObj","mes","getMonth","getDate","year","getFullYear","fechaFormateada","UTC","toLocaleDateString","weekday","month","day","fechaCita","horaCita","botonReservar","reservarCita","idServicios","map","datos","FormData","append","respuesta","method","body","Swal","fire","icon","title","text","button","then","window","location","reload","iniciarApp1","buscarPorFecha","fechaInput","fechaSeleccionada"],"mappings":"AAAA,IAAAA,KAAA,EACA,MAAAC,YAAA,EACAC,UAAA,EAEAC,KAAA,CACAC,GAAA,GACAC,OAAA,GACAC,MAAA,GACAC,KAAA,GACAC,UAAA,IAOA,SAAAC,aACAC,iBACAC,OACAC,mBACAC,iBACAC,kBACAC,eACAC,YACAC,gBACAC,mBACAC,kBACAC,iBAIA,SAAAV,iBAIA,MAAAW,EAAAC,SAAAC,cAAA,YACAF,GACAA,EAAAG,UAAAC,OAAA,WAIA,MAAAC,EAAA,SAAA1B,KACAsB,SAAAC,cAAAG,GACAF,UAAAG,IAAA,WAGA,MAAAC,EAAAN,SAAAC,cAAA,WACAK,GACAA,EAAAJ,UAAAC,OAAA,UAIAH,SAAAC,cAAA,eAAAvB,UACAwB,UAAAG,IAAA,UAIA,SAAAhB,OACAW,SAAAO,iBAAA,gBAEAC,QAAAC,IACAA,EAAAC,iBAAA,SAAA,SAAAC,GAEAjC,KAAAkC,SAAAD,EAAAE,OAAAC,QAAApC,MAEAU,iBAEAE,wBAKA,SAAAA,mBACA,MAAAC,EAAAS,SAAAC,cAAA,aACAT,EAAAQ,SAAAC,cAAA,cAEA,IAAAvB,MACAa,EAAAW,UAAAG,IAAA,WACAb,EAAAU,UAAAC,OAAA,YACA,IAAAzB,MACAa,EAAAW,UAAAC,OAAA,WACAX,EAAAU,UAAAG,IAAA,WAEAP,mBAEAP,EAAAW,UAAAC,OAAA,WACAX,EAAAU,UAAAC,OAAA,YAGAf,iBAGA,SAAAG,iBACAS,SAAAC,cAAA,aACAS,iBAAA,SAAA,WAEAhC,MA/FA,IAgGAA,OAEAY,uBAIA,SAAAE,kBACAQ,SAAAC,cAAA,cACAS,iBAAA,SAAA,WAEAhC,MAzGA,IA0GAA,OAEAY,uBAIAyB,eAAAtB,eAEA,IACA,MAAAuB,EAAA,sCACAC,QAAAC,MAAAF,GAGAG,uBAFAF,EAAAG,QAIA,MAAAC,GACAC,QAAAC,IAAAF,IAIA,SAAAF,iBAAAjC,GACAA,EAAAsB,QAAAgB,IACA,MAAA1C,GAAAA,EAAAC,OAAAA,EAAA0C,OAAAA,GAAAD,EAEAE,EAAA1B,SAAA2B,cAAA,KACAD,EAAAxB,UAAAG,IAAA,mBACAqB,EAAAE,YAAA7C,EAEA,MAAA8C,EAAA7B,SAAA2B,cAAA,KACAE,EAAA3B,UAAAG,IAAA,mBACAwB,EAAAD,YAAA,IAAAH,EAEA,MAAAK,EAAA9B,SAAA2B,cAAA,OACAG,EAAA5B,UAAAG,IAAA,YACAyB,EAAAhB,QAAAiB,WAAAjD,EACAgD,EAAAE,QAAA,WACAC,oBAAAT,IAGAM,EAAAI,YAAAR,GACAI,EAAAI,YAAAL,GAEA7B,SAAAC,cAAA,cAAAiC,YAAAJ,KAKA,SAAAG,oBAAAT,GACA,MAAA1C,GAAAA,GAAA0C,GACAtC,UAAAA,GAAAL,KAGAsD,EAAAnC,SAAAC,cAAA,sBAAAnB,OAGAI,EAAAkD,KAAAC,GAAAA,EAAAvD,KAAAA,IAGAD,KAAAK,UAAAA,EAAAoD,OAAAD,GAAAA,EAAAvD,KAAAA,GAEAqD,EAAAjC,UAAAC,OAAA,kBAGAtB,KAAAK,UAAA,IAAAA,EAAAsC,GAEAW,EAAAjC,UAAAG,IAAA,iBAMA,SAAAX,YACAb,KAAAC,GAAAkB,SAAAC,cAAA,OAAAsC,MAGA,SAAA5C,gBACAd,KAAAE,OAAAiB,SAAAC,cAAA,WAAAsC,MAGA,SAAA3C,mBACAI,SAAAC,cAAA,UACAS,iBAAA,SAAA,SAAAC,GAEA,MAAA6B,EAAA,IAAAC,KAAA9B,EAAAE,OAAA0B,OAAAG,YAGA,CAAA,EAAA,GAAAC,SAAAH,IACA7B,EAAAE,OAAA0B,MAAA,GACAK,cAAA,gCAAA,QAAA,gBAEA/D,KAAAG,MAAA2B,EAAAE,OAAA0B,SAMA,SAAA1C,kBACAG,SAAAC,cAAA,SACAS,iBAAA,SAAA,SAAAC,GAEA,MACA1B,EADA0B,EAAAE,OAAA0B,MACAM,MAAA,KAAA,GACA5D,EAAA,IAAAA,EAAA,IACA0B,EAAAE,OAAA0B,MAAA,GACAK,cAAA,iBAAA,QAAA,gBAEA/D,KAAAI,KAAA0B,EAAAE,OAAA0B,SAOA,SAAAK,cAAAE,EAAAC,EAAAC,EAAAC,GAAA,GAGA,MAAAC,EAAAlD,SAAAC,cAAA,WACAiD,GACAA,EAAA/C,SAIA,MAAAgD,EAAAnD,SAAA2B,cAAA,OACAwB,EAAAvB,YAAAkB,EACAK,EAAAjD,UAAAG,IAAA,UACA8C,EAAAjD,UAAAG,IAAA0C,GAGA/C,SAAAC,cAAA+C,GACAd,YAAAiB,GAEAF,GAEAG,WAAA,KACAD,EAAAhD,UACA,KAIA,SAAAL,iBAEA,MAAAuD,EAAArD,SAAAC,cAAA,sBAGA,KAAAoD,EAAAC,YACAD,EAAAE,YAAAF,EAAAC,YAIA,GAAAE,OAAAC,OAAA5E,MAAA8D,SAAA,KAAA,IAAA9D,KAAAK,UAAAwE,OAMA,YAFAd,cAAA,0CAAA,QAAA,sBAAA,GAOA,MAAA7D,OAAAA,EAAAC,MAAAA,EAAAC,KAAAA,EAAAC,UAAAA,GAAAL,KAGA8E,EAAA3D,SAAA2B,cAAA,MACAgC,EAAA/B,YAAA,uBACAyB,EAAAnB,YAAAyB,GAIAzE,EAAAsB,QAAAgB,IACA,MAAA1C,GAAAA,EAAA2C,OAAAA,EAAA1C,OAAAA,GAAAyC,EACAoC,EAAA5D,SAAA2B,cAAA,OACAiC,EAAA1D,UAAAG,IAAA,uBAEA,MAAAwD,EAAA7D,SAAA2B,cAAA,KACAkC,EAAAjC,YAAA7C,EAEA,MAAA8C,EAAA7B,SAAA2B,cAAA,KACAE,EAAAiC,UAAA,yBAAArC,EAEAmC,EAAA1B,YAAA2B,GACAD,EAAA1B,YAAAL,GAEAwB,EAAAnB,YAAA0B,KAKA,MAAAG,EAAA/D,SAAA2B,cAAA,MACAoC,EAAAnC,YAAA,kBACAyB,EAAAnB,YAAA6B,GAEA,MAAApE,EAAAK,SAAA2B,cAAA,KACAhC,EAAAmE,UAAA,wBAAA/E,EAGA,MAAAiF,EAAA,IAAAvB,KAAAzD,GACAiF,EAAAD,EAAAE,WACA1B,EAAAwB,EAAAG,UACAC,EAAAJ,EAAAK,cAMAC,EAJA,IAAA7B,KAAAA,KAAA8B,IAAAH,EAAAH,EAAAzB,IAIAgC,mBAAA,QADA,CAAAC,QAAA,OAAAL,KAAA,UAAAM,MAAA,OAAAC,IAAA,YAGAC,EAAA5E,SAAA2B,cAAA,KACAiD,EAAAd,UAAA,uBAAAQ,EAEA,MAAAO,EAAA7E,SAAA2B,cAAA,KACAkD,EAAAf,UAAA,sBAAA7E,UAIA,MAAA6F,EAAA9E,SAAA2B,cAAA,UACAmD,EAAA5E,UAAAG,IAAA,SACAyE,EAAAlD,YAAA,gBACAkD,EAAA9C,QAAA+C,aAEA1B,EAAAnB,YAAAvC,GACA0D,EAAAnB,YAAA0C,GACAvB,EAAAnB,YAAA2C,GAEAxB,EAAAnB,YAAA4C,GAIA/D,eAAAgE,eAEA,MAAAhG,OAAAA,EAAAC,MAAAA,EAAAC,KAAAA,EAAAC,UAAAA,EAAAJ,GAAAA,GAAAD,KAEAmG,EAAA9F,EAAA+F,IAAAzD,GAAAA,EAAA1C,IAGAoG,EAAA,IAAAC,SAEAD,EAAAE,OAAA,QAAApG,GACAkG,EAAAE,OAAA,OAAAnG,GACAiG,EAAAE,OAAA,YAAAtG,GACAoG,EAAAE,OAAA,YAAAJ,GAIA,IAEA,MAAAhE,EAAA,kCAEAqE,QAAAnE,MAAAF,EAAA,CACAsE,OAAA,OACAC,KAAAL,IAGAjE,QAAAoE,EAAAjE,OAEAE,QAAAC,IAAAN,GAEAA,EAAAA,WACAuE,KAAAC,KAAA,CACAC,KAAA,UACAC,MAAA,cACAC,KAAA,mCACAC,OAAA,OACAC,KAAA,KACA1C,WAAA,KACA2C,OAAAC,SAAAC,UACA,OAIA,MAAA5E,GACAmE,KAAAC,KAAA,CACAC,KAAA,QACAC,MAAA,QACAC,KAAA,sCC1XA,SAAAM,cACAC,iBAGA,SAAAA,iBACA,MAAAC,EAAApG,SAAAC,cAAA,WACA,OAAAmG,GACAA,EAAA1F,iBAAA,SAAA,SAAAC,GAEA,MAAA0F,EAAA1F,EAAAE,OAAA0B,MAEAwD,OAAAC,SAAA,UAAAK,KDHArG,SAAAU,iBAAA,oBAAA,WACAvB,gBCbAa,SAAAU,iBAAA,oBAAA,WACAwF","file":"bundle.js","sourcesContent":["let paso = 1;\r\nconst pasoInicial = 1;\r\nconst pasoFinal = 3;\r\n\r\nconst cita = {\r\n    id: '',\r\n    nombre: '',\r\n    fecha: '',\r\n    hora: '',\r\n    servicios: []\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded' , function() {     // Agregamos el evento de que cuando se cargue el DOM se ejecute la función iniciarApp()\r\n    iniciarApp();\r\n});\r\n\r\nfunction iniciarApp() {\r\n    mostrarSeccion();   // Realiza las tareas relacionadas con mostrar y ocultar secciones\r\n    tabs();             // Cambia la sección cuando se presionen los tabs\r\n    botonesPaginador(); // Agrega o quita los botones del paginador\r\n    paginaAnterior();   // Decrementa el paso para cambiar a la pagina anterior\r\n    paginaSiguiente();  // Incrementa el paso para cambiar de pagina\r\n    consultarAPI();     // Consulta la API en el backend de PHP\r\n    idCliente();        // Añade el id del cliente al objeto de cita\r\n    nombreCliente();    // Añade el nombre del cliente al objeto de cita\r\n    seleccionarFecha(); // Añade la fecha de la cita en el objeto\r\n    seleccionarHora();  // Añade la hora de la cita en el objeto\r\n    mostrarResumen();   // Muestra el resumen de la cita\r\n\r\n}\r\n\r\nfunction mostrarSeccion() {\r\n\r\n    // Ocultar la sección que tenga la clase de mostrar\r\n\r\n    const seccionAnterior = document.querySelector('.mostrar');    // Seleccionamos el elemento que tenga la clase .mostrar\r\n    if(seccionAnterior) {\r\n        seccionAnterior.classList.remove('mostrar');               // Eliminamos la clase mostrar del elemento contenido en la const seccionAnterior\r\n    }\r\n  \r\n    // Seleccionar la sección con el paso...\r\n    const pasoSelector = `#paso-${paso}`;                      // Tomamos el valor de la variable paso para completar el template string y lo almacenamos en la const pasoSelector\r\n    const seccion = document.querySelector(pasoSelector);      // Seleccionamos aquel elemento que contenga \"paso-x\" y lo almacenamos en la const seccion\r\n    seccion.classList.add('mostrar');                          // Agregamos la clase mostrar al elemento almacenado en sección, que es el <div> cuyo id=paso-x \r\n\r\n    // Quita la clase de actual al tab anterior\r\n    const tabAnterior = document.querySelector('.actual');     // Seleccionamos el elemento que tenga la clase .actual\r\n    if(tabAnterior) {\r\n        tabAnterior.classList.remove('actual');               // Eliminamos la clase .actual del elemento contenido en tabAnterior \r\n    }\r\n\r\n    // Resalta el tab actual\r\n    const tab = document.querySelector(`[data-paso=\"${paso}\"]`) // Seleccionamos el elemento por el atributo personalizado data- y lo almacenamos en la const tab\r\n    tab.classList.add('actual');                                // Agregamos la clase actual al elemento almacenado en tab\r\n\r\n}\r\n\r\nfunction tabs() {\r\n    const botones = document.querySelectorAll('.tabs button');  // Seleccionamos todos los botones de la clase \"tabs\" cuya etiqueta es <button> y los almacenamos en la constante botones\r\n\r\n    botones.forEach( boton => {                                 // Iteramos botones y a cada elemento del arreglo le llamamos boton\r\n        boton.addEventListener('click', function(e) {           // Asociamos a cada elemento boton el evento click, de forma que al clickar se ejecute la función indicada a la que le pasamos\r\n                                                                // el evento click\r\n            paso = parseInt(e.target.dataset.paso);             // Guardamos en la variable paso el paso asociado al elemento clickado\r\n\r\n            mostrarSeccion();                                   // Llamada a la función\r\n\r\n            botonesPaginador();                                 // Llamada a la función\r\n        });\r\n    })\r\n}\r\n\r\nfunction botonesPaginador() {\r\n    const paginaAnterior = document.querySelector('#anterior')      // Seleccionamos el boton anterior por su id y almacenamos el elemento <button> en la cte paginaAnterior\r\n    const paginaSiguiente = document.querySelector('#siguiente')    // Seleccionamos el boton siguiente por su id y almacenamos el elemento <button> en la cte paginaSiguiente\r\n    \r\n    if(paso === 1) {\r\n        paginaAnterior.classList.add('ocultar');                    // Ocultamos el elemento <button> almacenado en paginaAnterior agregandole la clase .ocultar\r\n        paginaSiguiente.classList.remove('ocultar');                // Mostramos el elemento <button> almacenado en paginaSiguiente agregandole la clase .ocultar\r\n    } else if (paso === 3) {\r\n        paginaAnterior.classList.remove('ocultar');                 // Mostramos el elemento <button> almacenado en paginaAnterior agregandole la clase .ocultar\r\n        paginaSiguiente.classList.add('ocultar');                   // Ocultamos el elemento <button> almacenado en paginaSiguiente agregandole la clase .ocultar\r\n\r\n        mostrarResumen();                                           // Llamada a la función\r\n    } else {\r\n        paginaAnterior.classList.remove('ocultar');                 // Mostramos el elemento <button> almacenado en paginaAnterior agregandole la clase .ocultar\r\n        paginaSiguiente.classList.remove('ocultar');                // Mostramos el elemento <button> almacenado en paginaSiguiente agregandole la clase .ocultar\r\n    }\r\n\r\n    mostrarSeccion();\r\n}\r\n\r\nfunction paginaAnterior() {\r\n    const paginaAnterior = document.querySelector('#anterior')      // Seleccionamos el boton anterior por su id y almacenamos el elemento <button> en la cte paginaAnterior\r\n    paginaAnterior.addEventListener('click', function() {           // Agregamos un eventListener tipo click al <button> para que se ejecute la funcion indicada\r\n\r\n        if(paso <= pasoInicial) return;                             // Si se cumple la condición se interrumpe la ejecución del código\r\n        paso--;                                                     // Decrementamos el valor de la variable paso de 1 en 1\r\n        \r\n        botonesPaginador();                                         // Llamada a la función\r\n    })                                 \r\n}\r\n\r\nfunction paginaSiguiente() {\r\n    const paginaSiguiente = document.querySelector('#siguiente')    // Seleccionamos el boton anterior por su id y almacenamos el elemento <button> en la cte paginaSiguiente\r\n    paginaSiguiente.addEventListener('click', function() {          // Agregamos un eventListener tipo click al <button> para que se ejecute la funcion indicada\r\n\r\n        if(paso >= pasoFinal) return;                               // Si se cumple la condición se interrumpe la ejecución del código\r\n        paso++;                                                     // Incrementamos el valor de la variable paso de 1 en 1\r\n        \r\n        botonesPaginador();                                         // Llamada a la función\r\n    })                                 \r\n}\r\n\r\nasync function consultarAPI() {\r\n\r\n    try {\r\n        const url = 'http://localhost:3000/api/servicios';  // Es la url que voy a consumir, la que tiene mi API\r\n        const resultado = await fetch(url);                 // Fetch es la función que nos va a permitir consumir el servicio (http://localhost:3000/api/servicios)\r\n        const servicios = await resultado.json();           // Aplicamos el metodo json sobre resultado para obtener los servicios de la BD\r\n\r\n        mostrarServicios(servicios);                        // Llamada a la función a la que por parametro le pasamos el json almacenado en servicios\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction mostrarServicios(servicios) {                  \r\n    servicios.forEach(servicio => {                         // Iteramos sobre cada elemento del json almacenado en servicios\r\n        const { id, nombre, precio} = servicio;             // Almaceno en la cte servicio los valores de id, nombre y precio para cada iteracion haciendo destructuring\r\n\r\n        const nombreServicio = document.createElement('P'); // Creamos un elemento <p> y lo almacenamos en nombreServicio\r\n        nombreServicio.classList.add('nombre-servicio');    // Agregamos al elemento <p> en nombreServicio la clase .nombre-servicio\r\n        nombreServicio.textContent = nombre;                // Agregamos al elemento <p> en nombreServicio el texto \"nombre\"\r\n\r\n        const precioServicio = document.createElement('P'); // Creamos un elemento <p> y lo almacenamos en precioServicio\r\n        precioServicio.classList.add('precio-servicio');    // Agregamos al elemento <p> en precioServicio la clase .precio-servicio\r\n        precioServicio.textContent = `$${precio}`;          // Agregamos al elemento <p> en precioServicio el texto \"precio\"\r\n\r\n        const servicioDiv = document.createElement('DIV');  // Creamos un elemento <div> y lo almacenamos en servicioDiv\r\n        servicioDiv.classList.add('servicio');              // Agregamos al elemento <div> en servicioDiv la clase .servicio\r\n        servicioDiv.dataset.idServicio = id;                // Agregamos un atributo personalizado con dataset id-servicio cuyo valor sera el contenido en id\r\n        servicioDiv.onclick = function() {\r\n            seleccionarServicio(servicio);                  // Al clickar en alguno de los <div> almacenados en servicioDiv se ejecutará seleccionarServicio\r\n        }                                                   // pasando por parametro unicamente el servicio seleccionado\r\n\r\n        servicioDiv.appendChild(nombreServicio);            // Agregamos como hijo del elemento <div> contenido en servicioDiv el elemento <p> contenido en nombreServicio\r\n        servicioDiv.appendChild(precioServicio);            // Agregamos como hijo del elemento <div> contenido en servicioDiv el elemento <p> contenido en nombreServicio\r\n\r\n        document.querySelector('#servicios').appendChild(servicioDiv); // Seleccionamos el <div> donde inyectamos el codigo por su atributo id y le agregamos como hijo con appenChild los\r\n                                                                       // elementos <p> que tenemos contenidos en ServicioDiv\r\n    });\r\n}\r\n\r\nfunction seleccionarServicio(servicio) {\r\n    const { id } = servicio;                                                    // Extraigo el id del objeto servicio\r\n    const {servicios} = cita;                                                   // Extraigo el arreglo servicios del objeto cita\r\n\r\n    // Identificar el elemento al que se le da click\r\n    const divServicio = document.querySelector(`[data-id-servicio=\"${id}\"]`);   // Seleccionamos el elemento, <div>, por su atributo personalizado y lo almacenamos en divServicio\r\n\r\n    // Comprobar si un servicio ya fue agregado\r\n    if( servicios.some( agregado => agregado.id === id)) {                      // Comparamos con some los id de los elementos en el arreglo servicios con el id del ultimo servicio clickado\r\n\r\n        //Eliminarlo\r\n        cita.servicios = servicios.filter(agregado => agregado.id !== id);      // Filtamos con filter dejando solo en el arreglo servicios aquellos elementos con distinto id.  \r\n                                                                                // Filter crea un nuevo arreglo con todos los elementos que pasan la función, es decir tienen distinto id\r\n        divServicio.classList.remove('seleccionado');                           // Eliminamos del <div> almacenado en divServicio la clase \"seleccionado\"\r\n    } else {\r\n        // Agregarlo\r\n        cita.servicios = [...servicios, servicio]                               // Escribimos en el arreglo servicios, lo que teniamos antes en dicho arreglo (servicios) y le agregamos \r\n                                                                                // el objeto que hemos clickado (servicio)\r\n        divServicio.classList.add('seleccionado');                              // Agregamos al <div> almacenado en divServicio la clase \"seleccionado\"                                                               \r\n        \r\n    }\r\n    //console.log(cita);                                                                             \r\n}\r\n\r\nfunction idCliente() {\r\n    cita.id = document.querySelector('#id').value;     // Almacenamos en el objeto cita el valor del atributo value del elemento cuyo id es \"id\"\r\n}\r\n\r\nfunction nombreCliente() {\r\n    cita.nombre = document.querySelector('#nombre').value;     // Almacenamos en el objeto cita el valor del atributo value del elemento cuyo id es \"nombre\"\r\n}\r\n\r\nfunction seleccionarFecha() {\r\n    const inputFecha = document.querySelector('#fecha');                // Seleccionamos el valor del id=fecha y lo almacenamos en inputFecha\r\n    inputFecha.addEventListener('input', function(e) {                  // Agregamos un evento tipo input al elemento <input> correspondiente a la fecha, de manera que si se produce el evento se\r\n                                                                        // ejecuta la funcion cuyo evento es e\r\n        const dia = new Date(e.target.value).getUTCDay();               // Tomamos el dia de la semana instanciando un objeto tipo Date al que le pasamos la fecha clickada y tomando el valor de su\r\n                                                                        // atributo getUTCDay, y lo almacenamos en la variable dia\r\n\r\n        if( [0, 6].includes(dia) ) {                                                     // Evaluamos si el valor en dia esta en el arreglo mediante includes()\r\n            e.target.value = '';                                                         // Asignamos un string vacio como valor de la fecha del evento \r\n            mostrarAlerta('Fines de semana no permitidos', 'error', '.formulario');      // Llamada a la función que nos mostrara la alerta de haber seleccionado una fecha en fin de semana   \r\n        } else {\r\n            cita.fecha = e.target.value;                                                 // Agregamos la fecha de la reserva en el objeto cita\r\n            //console.log(cita);\r\n        }\r\n    });\r\n}\r\n\r\nfunction seleccionarHora() {\r\n    const inputHora = document.querySelector('#hora');                  // Seleccionamos el valor del id=hora y lo almacenamos en inputHora\r\n    inputHora.addEventListener('input', function(e) {                   // Agregamos un evento tipo input al elemento <input> correspondiente a la fecha, de manera que si se produce el evento se\r\n                                                                        // ejecuta la función cuyo evento es e\r\n        const horaCita = e.target.value;                                // Almacenamos la hora seleccionada que tenemos en el evento e en la cte horaCita\r\n        const hora =horaCita.split(\":\")[0];                             // Obtenemos un arreglo con los valores separados de hora y minutos\r\n        if(hora < 10 || hora > 18) {                                    // Establecemos que se muestre un mensaje u otro en funcion de si la hora esta dentro o fuera del rango indicado\r\n            e.target.value = '';                                        // Asignamos un string vacio al valor de la hora seleccionada para q no se muestre la hora q se selecciono en el formulario\r\n            mostrarAlerta('Hora no Válida', 'error', '.formulario');    // Se muestra la alerta tipo 'error' con el mensaje indicado\r\n        } else {\r\n            cita.hora = e.target.value;                                 // Almacenamos en el atributo hora del objeto cita el valor de la hora seleccionada en el formulario\r\n        }\r\n\r\n        // console.log(cita);\r\n    });\r\n}\r\n\r\nfunction mostrarAlerta(mensaje, tipo, elemento, desaparece = true) {\r\n\r\n    // Eliminamos la alerta Previa\r\n    const alertaPrevia = document.querySelector('.alerta');             // Seleccionamos el elemento cuya clase sea .alerta y lo almacenamos en alertaPrevia\r\n    if(alertaPrevia) {                                                  // Si tenemos un elemento ya almacenado en alertaPrevia lo eliminamos\r\n        alertaPrevia.remove();\r\n    }                                            \r\n                                                                        \r\n    // Scripting para crear la alerta                                                                     \r\n    const alerta = document.createElement('DIV');                       // Creamos un <div> y lo almacenamos en la cte alerta\r\n    alerta.textContent = mensaje;                                       // Agregamos al <div> que tenemos en alerta el mensaje que recibe la función por parámetro\r\n    alerta.classList.add('alerta');                                     // Agregamos al <div> las clase alerta\r\n    alerta.classList.add(tipo);                                         // Agregamos al <div> las clase alerta\r\n\r\n    \r\n    const referencia = document.querySelector(elemento);                // Seleccionamos el elemento que tiene la clase q se pasa por parametro y lo almacenamos en la cte formulario\r\n    referencia.appendChild(alerta);                                     // Agregamos al elemento padre formulario, <form>, el elemento en alerta, <div>, como hijo mediante appendChild\r\n\r\n    if(desaparece) {\r\n        // Eliminar la alerta\r\n        setTimeout(() => {                                              // Función que hace que se ejecute tras 3 segundos de mostrado el mensaje de alerta, el codigo indicado en su interior\r\n            alerta.remove();                                            // Eliminamos el <div> contenido en la cte alerta\r\n        }, 3000);\r\n    }\r\n}\r\n\r\nfunction mostrarResumen() {\r\n\r\n    const resumen = document.querySelector('.contenido-resumen');               // Seleccionamos el <div> de la seccion Resumen y lo almacenamos en la constante resumen\r\n\r\n    // Limpiar el contenido de Resumen\r\n    while(resumen.firstChild) {                                                 // Iteramos el contenido de firstChild de resumen \r\n        resumen.removeChild(resumen.firstChild);                                // Eliminamos el contenido del firstChild de resumen\r\n    }\r\n                                   \r\n\r\n    if(Object.values(cita).includes('') || cita.servicios.length === 0) {                                  // Si alguno de los valores del objeto cita es un string vacío o el arreglo de los   \r\n                                                                                                           // Servicios está vacío se mostrará el mensaje indicado en el if, sino, el mensaje\r\n                                                                                                           // indicado en el else  \r\n                                                                                                           \r\n        mostrarAlerta('Faltan datos de Servicios, Fecha u Hora', 'error', '.contenido-resumen', false);    // Llamada a la función \r\n        \r\n        return;\r\n    } \r\n\r\n// Formatear el div de resumen\r\n\r\nconst {nombre, fecha, hora, servicios} = cita;                  // Hacemos destructuring, extrayendo de cita su info a 4 variables independientes (nombre, fecha, hora, servicios)\r\n\r\n// Heading para Servicios en Resumen\r\nconst headingServicios = document.createElement('H3');          // Creamos un elemento <h3> para incluir en el un titulo\r\nheadingServicios.textContent = 'Resumen de Servicios';          // Agregamos el texto del titulo al <h3> contenido en readingServicios\r\nresumen.appendChild(headingServicios);                          // Agregamos el <h3> contenido en headingServicios al <div> contenido en resumen\r\n\r\n\r\n// Iterando y mostrando los servicios\r\nservicios.forEach(servicio => {\r\n    const { id, precio, nombre } = servicio;                        // Hacemos destructuring, extrayendo de servicio su info en 3 variables independientes (id, precio, nombre)\r\n    const contenedorServicio = document.createElement('DIV');       // Cada elemento del arreglo, cada servicio iterado, lo colocamos dentro de un <div> y lo alamacenamos en contenedorServicio\r\n    contenedorServicio.classList.add('contenedor-servicio');        // Agregamos al <div> la clase .contedor-servicio\r\n\r\n    const textoServicio = document.createElement('P');              // Creamos el elemento <p> y lo almacenamos en textoServicio\r\n    textoServicio.textContent = nombre;                             // Agregamos a textoServicio como texto el valor de la variable nombre ( que viene del arreglo servicio y pasamos a la variable\r\n                                                                    // nombre por destructuring de servicio. Si no hubieramos hecho destructuring la sintaxis hubiera sido servicio.nombre\r\n    const precioServicio = document.createElement('P');             // Creamos el elemento <p> y lo almacenamos en precioServicio\r\n    precioServicio.innerHTML = `<span>Precio:</span> $${precio}`;   // Incluimos en el <p> un elemento <span> y el valor de la variable precio\r\n\r\n    contenedorServicio.appendChild(textoServicio);                  // Agregamos en el <div> de la seccion Resumen, almacenado en contenedorServicio, el <p> y su <span> contenidos en textoServicio \r\n    contenedorServicio.appendChild(precioServicio);                 // Agregamos en el <div> de la seccion Resumen, almacenado en contenedorServicio, el <p> y su <span> contenidos en precioServicio\r\n\r\n    resumen.appendChild(contenedorServicio);                        // Agregamos en el <div> de la seccion Resumen, almacenado en resumen, los <p> y <span> contenidos en contenedorServicio\r\n  \r\n    });\r\n\r\n// Heading para Cita en Resumen\r\nconst headingCita = document.createElement('H3');          // Creamos un elemento <h3> para incluir en el un titulo\r\nheadingCita.textContent = 'Resumen de Cita';               // Agregamos el texto del titulo al <h3> contenido en readingCita\r\nresumen.appendChild(headingCita);                          // Agregamos el <h3> contenido en headingCita al <div> contenido en resumen\r\n\r\nconst nombreCliente = document.createElement('P');              // Creamos un elemento <p> que almacenamos en nombreCliente\r\nnombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`;     // Incluimos en el <p> un elemento <span> y el valor de la variable nombre\r\n\r\n// Formatear la fecha en español\r\nconst fechaObj = new Date(fecha)                                // Instanciamos un objeto tipo fecha a partir del string que tenemos (fecha)\r\nconst mes = fechaObj.getMonth();                                // Almacenamos en la variable mes el mes obtenido al aplicar al objeto fechaObj el metodo getMonth()\r\nconst dia = fechaObj.getDate();                                 // Almacenamos en la variable dia el numero de dia obtenido al aplicar al objeto fechaObj el metodo getDate()\r\nconst year = fechaObj.getFullYear();                            // Almacenamos en la variable year el año obtenido al aplicar al objeto fechaObj el metodo getFullYear()\r\n\r\nconst fechaUTC = new Date(Date.UTC(year, mes, dia));            // Convertimos la fecha a formato UTC con el metodo de Date UTC(). Al metodo UTC() le pasamos la fecha como UNIX pero instanciamos\r\n                                                                // el nuevo objeto como Date\r\n\r\nconst opciones = {weekday: 'long', year:'numeric', month: 'long', day: 'numeric'}   // Almacenamos en opciones el formato de la fecha elegido a traves de los parametros indicados\r\nconst fechaFormateada = fechaUTC.toLocaleDateString('es-ES', opciones);             // Obtenemos una fecha formateada en el ididoma elegido, españos de España en nuestro caso\r\n    \r\nconst fechaCita = document.createElement('P');                                      // Creamos un elemento <p> que almacenamos en fechaCita\r\nfechaCita.innerHTML = `<span>Fecha:</span> ${fechaFormateada}`;                     // Incluimos en el <p> un elemento <span> y el valor de la variable fechaFormateada\r\n    \r\nconst horaCita = document.createElement('P');                   // Creamos un elemento <p> que almacenamos en fechaHora\r\nhoraCita.innerHTML = `<span>Hora:</span> ${hora} Horas`;        // Incluimos en el <p> un elemento <span> y el valor de la variable hora\r\n\r\n\r\n// Boton para creaer una cita\r\nconst botonReservar = document.createElement('BUTTON');         // Creamos un elemento <button> y lo almacenamos en botonReservar\r\nbotonReservar.classList.add('boton');                           // Agregamos al <button> la clase boton\r\nbotonReservar.textContent = 'Reservar Cita';                    // Agregamos al <button> el texto que se indica\r\nbotonReservar.onclick = reservarCita;                           // Establecemos que cuando se presione el boton botonReservar se ejecute la función reservarCita\r\n\r\nresumen.appendChild(nombreCliente);                             // Agregamos en el <div> de la seccion Resumen, almacenado en resumen, el <p> y su <span> contenidos en nombreCliente\r\nresumen.appendChild(fechaCita);                                 // Agregamos en el <div> de la seccion Resumen, almacenado en resumen, el <p> y su <span> contenidos en fechaCita\r\nresumen.appendChild(horaCita);                                  // Agregamos en el <div> de la seccion Resumen, almacenado en resumen, el <p> y su <span> contenidos en horaCita\r\n\r\nresumen.appendChild(botonReservar);                             // Agregamos en el <div> de la seccion Resumen, almacenado en resumen, el <botton> contenido en botonReservar\r\n\r\n}\r\n\r\nasync function reservarCita() {\r\n\r\n    const { nombre, fecha, hora, servicios, id } = cita;                // Hacemos un destructuring a cita\r\n\r\n    const idServicios = servicios.map( servicio => servicio.id);    // Iteramos sobre cada uno de los servicios (servicio) identificamos el campo id (servicio.id) y almacenamos el id del\r\n                                                                    // servicio en la variable idServicios\r\n\r\n    const datos = new FormData();                                   // Creamos un objeto tipo FormData y lo almacenamos en datos\r\n    \r\n    datos.append('fecha', fecha);                                   // Agregamos al FormData datos el dato de la variable fecha a $_POST[fecha]\r\n    datos.append('hora', hora);                                     // Agregamos al FormData datos el dato de la variable hora a $_POST[hora]\r\n    datos.append('usuarioId', id);                                  // Agregamos al FormData datos el dato de la variable id a $_POST[id]\r\n    datos.append('servicios', idServicios);                         // Agregamos al FormData datos el dato de la variable hora a $_POST[idServicios]\r\n\r\n    // console.log([...datos]);\r\n\r\n    try {\r\n        // Petición hacia la API\r\n        const url = 'http://localhost:3000/api/citas';              // Almacenamos la direccion de la API a la que haremos nuestro request (solicitud) en la variable url\r\n\r\n        const respuesta = await fetch(url, {                        // Indicamos la API a la que haremos la petición mediante fetch\r\n            method: 'POST',                                         // Indicamos que enviaremos información mediante un POST\r\n            body: datos                                             // Indidamos a fetch donde se encuentran los datos que se enviaran en la petición al servidor\r\n        });\r\n\r\n        const resultado = await respuesta.json();                   // Transformamos la respuesta en un resultado tipo json que se pueda leer a traves del JS del navegador\r\n        \r\n        console.log(resultado);       \r\n        \r\n        if(resultado.resultado) {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'Cita Creada',\r\n                text: 'Tu cita fue creada correctamente',\r\n                button: 'OK'\r\n            }).then( () => {\r\n                setTimeout(() => {\r\n                    window.location.reload();                       // Callback a la función que nos recarga la pagina donde nos encontramos\r\n                }, 3000);                       \r\n            })\r\n        }\r\n\r\n    } catch(error) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error',\r\n            text: 'Hubo un error al guardar la cita',\r\n          })\r\n    }\r\n\r\n    // console.log([...datos]);                                 // Console.log para visualizar en consola los datos incluidos en el FormData()\r\n}","document.addEventListener('DOMContentLoaded', function() {      // Agregamos el evento de que cuando se cargue el DOM se ejecute la función iniciarApp()\r\n    iniciarApp1();\r\n});\r\n\r\nfunction iniciarApp1() {\r\n    buscarPorFecha();\r\n}\r\n\r\nfunction buscarPorFecha() {\r\n    const fechaInput = document.querySelector('#fechas');       // Seleccionamos el <input> de fecha del formulario por su id.\r\n    if(fechaInput !== null){\r\n    fechaInput.addEventListener('input', function(e) {          // Asociamos al <input> de fecha, almacenado en fechaInput, la ejecución de una función siendo el evento disparador\r\n                                                                // tipo input (seleccionar una fecha en el selector del input de fechas del formulario)\r\n        const fechaSeleccionada = e.target.value;               // Leemos el valor de la fecha seleccionada (el valor del evento) y lo almacenamos en la variable fechaSeleccionada\r\n\r\n        window.location = `?fecha=${fechaSeleccionada}`;        // Redireccionamos al usuario a la URL con la fecha seleccionada en el Query String\r\n        });   \r\n    }\r\n}"]}